diff -r ./wetty/app.js /home/mchen6/wetty/app.js
9,120c9,109
< // var opts = require('optimist')
< //     .options({
< //         sslkey: {
< //             demand: false,
< //             description: 'path to SSL key'
< //         },
< //         sslcert: {
< //             demand: false,
< //             description: 'path to SSL certificate'
< //         },
< //         sshhost: {
< //             demand: false,
< //             description: 'ssh server host'
< //         },
< //         sshport: {
< //             demand: false,
< //             description: 'ssh server port'
< //         },
< //         sshuser: {
< //             demand: false,
< //             description: 'ssh user'
< //         },
< //         sshauth: {
< //             demand: false,
< //             description: 'defaults to "password", you can use "publickey,password" instead'
< //         },
< //         port: {
< //             demand: true,
< //             alias: 'p',
< //             description: 'wetty listen port'
< //         },
< //     }).boolean('allow_discovery').argv;
< 
< // var runhttps = false;
< // var sshport = 22;
< // var sshhost = 'localhost';
< // var sshauth = 'password';
< // var globalsshuser = '';
< 
< // if (opts.sshport) {
< //     sshport = opts.sshport;
< // }
< 
< // if (opts.sshhost) {
< //     sshhost = opts.sshhost;
< // }
< 
< // if (opts.sshauth) {
< // 	sshauth = opts.sshauth
< // }
< 
< // if (opts.sshuser) {
< //     globalsshuser = opts.sshuser;
< // }
< 
< // if (opts.sslkey && opts.sslcert) {
< //     runhttps = true;
< //     opts['ssl'] = {};
< //     opts.ssl['key'] = fs.readFileSync(path.resolve(opts.sslkey));
< //     opts.ssl['cert'] = fs.readFileSync(path.resolve(opts.sslcert));
< // }
< 
< // process.on('uncaughtException', function(e) {
< //     console.error('Error: ' + e);
< // });
< 
< module.exports = function(httpserv, app) {
<     var sshhost = 'localhost';
<     var globalsshuser = '';
< 
<     app.get('/wetty/ssh/:user', function(req, res) {
<         res.sendfile(__dirname + '/public/wetty/index.html');
<     });
<     app.use('/', express.static(path.join(__dirname, 'public')));
< 
<     var io = server(httpserv,{path: '/wetty/socket.io'});
<     io.on('connection', function(socket){
<         var sshuser = '';
<         var request = socket.request;
<         console.log((new Date()) + ' Connection accepted.');
<         if (match = request.headers.referer.match('/wetty/ssh/.+$')) {
<             sshuser = match[0].replace('/wetty/ssh/', '') + '@';
<         } else if (globalsshuser) {
<             sshuser = globalsshuser + '@';
<         }
< 
<         var term;
<         if (process.getuid() == 0) {
<             term = pty.spawn('/bin/login', ['-f', 'term'], {
<                 name: 'xterm-256color',
<                 cols: 80,
<                 rows: 30
<             });
<         } else {
<             term = pty.spawn('ssh', [sshuser + sshhost], {
<                 name: 'xterm-256color',
<                 cols: 80,
<                 rows: 30
<             });
<         }
<         console.log((new Date()) + " PID=" + term.pid + " STARTED on behalf of user=" + sshuser)
<         term.on('data', function(data) {
<             socket.emit('output', data);
<         });
<         term.on('exit', function(code) {
<             console.log((new Date()) + " PID=" + term.pid + " ENDED")
<         });
<         socket.on('resize', function(data) {
<             term.resize(data.col, data.row);
<         });
<         socket.on('input', function(data) {
<             term.write(data);
---
> var opts = require('optimist')
>     .options({
>         sslkey: {
>             demand: false,
>             description: 'path to SSL key'
>         },
>         sslcert: {
>             demand: false,
>             description: 'path to SSL certificate'
>         },
>         sshhost: {
>             demand: false,
>             description: 'ssh server host'
>         },
>         sshport: {
>             demand: false,
>             description: 'ssh server port'
>         },
>         sshuser: {
>             demand: false,
>             description: 'ssh user'
>         },
>         sshauth: {
>             demand: false,
>             description: 'defaults to "password", you can use "publickey,password" instead'
>         },
>         port: {
>             demand: true,
>             alias: 'p',
>             description: 'wetty listen port'
>         },
>     }).boolean('allow_discovery').argv;
> 
> var runhttps = false;
> var sshport = 22;
> var sshhost = 'localhost';
> var sshauth = 'password';
> var globalsshuser = '';
> 
> if (opts.sshport) {
>     sshport = opts.sshport;
> }
> 
> if (opts.sshhost) {
>     sshhost = opts.sshhost;
> }
> 
> if (opts.sshauth) {
> 	sshauth = opts.sshauth
> }
> 
> if (opts.sshuser) {
>     globalsshuser = opts.sshuser;
> }
> 
> if (opts.sslkey && opts.sslcert) {
>     runhttps = true;
>     opts['ssl'] = {};
>     opts.ssl['key'] = fs.readFileSync(path.resolve(opts.sslkey));
>     opts.ssl['cert'] = fs.readFileSync(path.resolve(opts.sslcert));
> }
> 
> process.on('uncaughtException', function(e) {
>     console.error('Error: ' + e);
> });
> 
> var httpserv;
> 
> var app = express();
> app.get('/wetty/ssh/:user', function(req, res) {
>     res.sendfile(__dirname + '/public/wetty/index.html');
> });
> app.use('/', express.static(path.join(__dirname, 'public')));
> 
> if (runhttps) {
>     httpserv = https.createServer(opts.ssl, app).listen(opts.port, function() {
>         console.log('https on port ' + opts.port);
>     });
> } else {
>     httpserv = http.createServer(app).listen(opts.port, function() {
>         console.log('http on port ' + opts.port);
>     });
> }
> 
> var io = server(httpserv,{path: '/wetty/socket.io'});
> io.on('connection', function(socket){
>     var sshuser = '';
>     var request = socket.request;
>     console.log((new Date()) + ' Connection accepted.');
>     if (match = request.headers.referer.match('/wetty/ssh/.+$')) {
>         sshuser = match[0].replace('/wetty/ssh/', '') + '@';
>     } else if (globalsshuser) {
>         sshuser = globalsshuser + '@';
>     }
> 
>     var term;
>     if (process.getuid() == 0) {
>         term = pty.spawn('/bin/login', [], {
>             name: 'xterm-256color',
>             cols: 80,
>             rows: 30
122,123c111,115
<         socket.on('disconnect', function() {
<             term.end();
---
>     } else {
>         term = pty.spawn('ssh', [sshuser + sshhost, '-p', sshport, '-o', 'PreferredAuthentications=' + sshauth], {
>             name: 'xterm-256color',
>             cols: 80,
>             rows: 30
125,126c117,134
<     })
< }
---
>     }
>     console.log((new Date()) + " PID=" + term.pid + " STARTED on behalf of user=" + sshuser)
>     term.on('data', function(data) {
>         socket.emit('output', data);
>     });
>     term.on('exit', function(code) {
>         console.log((new Date()) + " PID=" + term.pid + " ENDED")
>     });
>     socket.on('resize', function(data) {
>         term.resize(data.col, data.row);
>     });
>     socket.on('input', function(data) {
>         term.write(data);
>     });
>     socket.on('disconnect', function() {
>         term.end();
>     });
> })
Only in /home/mchen6/wetty: .git
Only in /home/mchen6/wetty: .gitignore
Only in /home/mchen6/wetty: key
Only in /home/mchen6/wetty: key.pub
diff -r ./wetty/public/wetty/wetty.js /home/mchen6/wetty/public/wetty/wetty.js
39,40d38
<         term.prefs_.set('send-encoding', 'raw');
<         term.prefs_.set('receive-encoding', 'raw');
50c48
<             term.io.writeUTF8(buf);
---
>             term.io.writeUTF16(buf);
61c59
<     term.io.writeUTF8(data);
---
>     term.io.writeUTF16(data);
